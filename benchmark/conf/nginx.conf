worker_processes  4;

error_log /dev/stderr;
error_log error.log;

events {
  worker_connections 1024;
}

http {

#  lua_code_cache off;
  lua_package_path "../lua/?.lua;;;";

  upstream target {
    server target:3002;
  }

  init_by_lua_block {
    ffi = require('ffi')
    lua2go = require('lua2go')

    -- copied from benchmark.h
    ffi.cdef[[
      extern GoString process(GoString method, GoString headers, GoString body);
    ]]
   }

  root ./;

  # responds from the local (initial) nginx
  server {
    server_name localhost;
    listen 3000;

    # for static page call /file
    location / {
    }

    location /echo {
      echo local_;
    }

    location /lua2go {
      content_by_lua_block {
        local benchmark = require('lua/benchmark')
        local result = benchmark.run()
        ngx.say(result)
      }
    }
  }

  # responds by proxying to the "target" nginx
  server {
    server_name localhost;
    listen 3001;

    location / {
      proxy_pass http://target;
    }

    location /echo {
      proxy_pass http://target/echo;
    }

    location /lua2go {
      rewrite_by_lua_block {
        local benchmark = require('lua/benchmark')
        local result = benchmark.run()
        -- result = ngx.location.capture('/echo')
        -- ngx.say(result.body)
        ngx.req.set_uri('/echo', true)
      }
    }
  }

  # the "target" nginx is an echo server
  server {
    server_name localhost;
    listen 3002;

    # for static page call /file
    location / {
    }

    location /echo {
      echo target;
    }
  }
}
